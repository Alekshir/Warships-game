{"version":3,"sources":["webpack://warship_game/./src/webworker/TimerWorker/TimerWorker.ts"],"names":["constructor","self","addEventListener","e","data","action","this","countTime","time","end","postMessage","setTimeout"],"mappings":"AA2BkB,IAtBlB,MAIIA,cAAa,a,sBAAA,W,OAFD,M,4CAEC,K,IAFD,MAGRC,KAAKC,iBAAiB,WAAYC,IACX,UAAhBA,EAAEC,KAAKC,OACNC,KAAKC,UAAwB,OAAdJ,EAAEC,KAAKI,KAAc,EAAIL,EAAEC,KAAKI,MACpB,SAAhBL,EAAEC,KAAKC,SAAiBC,KAAKG,KAAI,MAIxDF,UAAUC,IACQ,IAAXF,KAAKG,KAIRR,KAAKS,YAAY,CAAEL,OAAQ,OAAQG,SACnCG,YAAW,KAAQL,KAAKC,YAAYC,KAAS,MAJzCP,KAAKS,YAAY,CAAEL,OAAQ,OAAQG","file":"worker.js","sourcesContent":["import WorkerClassInterface from \"./WorkerInterface\";\r\n\r\n//const scope=self //as any//unknown as DedicatedWorkerGlobalScope;\r\n//const ctx: Worker = self as any;\r\n\r\nclass TimerWorker implements WorkerClassInterface  {\r\n\r\n    end:boolean=false;\r\n\r\n    constructor(){\r\n        self.addEventListener('message', (e:MessageEvent)=>{\r\n            if(e.data.action===\"start\") {\r\n                this.countTime(e.data.time===null ? 0 : e.data.time);\r\n                } else if (e.data.action===\"stop\") this.end=true;\r\n        });\r\n    }\r\n\r\n    countTime(time:number){\r\n        if(this.end===true) {\r\n            self.postMessage({ action: \"stop\", time});//we can't use scope.postMessage({ action: \"stop\", time}, \"*\")\r\n            return;\r\n        }\r\n        self.postMessage({ action: \"move\", time});\r\n        setTimeout(() => { this.countTime(++time) }, 1000)\r\n    }\r\n}\r\n\r\nconst timerWorker=new TimerWorker();"],"sourceRoot":""}